
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Liam
 * @author Henry
 * @author Kyle
 */
public class DispatchPage extends javax.swing.JFrame {

    /**
     * Creates new form DispatchPage
     */
    Connection conn = null;
    Statement st = null;
    ResultSet rs = null;
    ArrayList<Object[]> orderList = new ArrayList();
    ArrayList<Object[]> productList = new ArrayList();
    int row;
    private static javax.swing.Timer t;

    public DispatchPage(LoginPage login, ResultSet rs, Connection conn) {
        login.dispose();
        initComponents();
        setSize(1270, 730);
        this.setLocationRelativeTo(null);
        this.setVisible(true);

        try {
            this.conn = conn;
            displayOrders();
        } catch (SQLException ex) {
            Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        IncomingOrdersTbl.setDefaultEditor(Object.class, null);
        SelectedOrderTbl.setDefaultEditor(Object.class, null);
        IncomingOrdersTbl.setRowSelectionInterval(0, 0);

        row = IncomingOrdersTbl.getSelectedRow();
        displayProducts(row);
        myTimer();

    }

    public void myTimer() {
        t = null;
        t = new Timer(300000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                connection();
            }
        });

        java.util.Timer tt = new java.util.Timer(false);
        tt.schedule(new TimerTask() {
            @Override
            public void run() {
                t.start();
            }
        }, 0);
    }

    public void connection() {
        try {
            this.conn = conn;
            displayOrders();
        } catch (SQLException ex) {
            Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ExitLbl = new javax.swing.JLabel();
        MinLbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        OrdersLbl = new javax.swing.JLabel();
        btnSignOut = new javax.swing.JButton();
        PreviousBtn = new javax.swing.JButton();
        NextBtn = new javax.swing.JButton();
        FirstBtn = new javax.swing.JButton();
        LastBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        IncomingOrdersTbl = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        SelectedOrderTbl = new javax.swing.JTable();
        ExportToExcelBtn = new javax.swing.JButton();
        ProcessOrderBtn1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        ExitLbl.setFont(new java.awt.Font("Leelawadee UI", 1, 48)); // NOI18N
        ExitLbl.setForeground(new java.awt.Color(255, 255, 255));
        ExitLbl.setText("x");
        ExitLbl.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ExitLblMouseMoved(evt);
            }
        });
        ExitLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExitLblMouseClicked(evt);
            }
        });
        jPanel1.add(ExitLbl);
        ExitLbl.setBounds(1220, 0, 28, 58);

        MinLbl.setFont(new java.awt.Font("Leelawadee UI", 1, 48)); // NOI18N
        MinLbl.setForeground(new java.awt.Color(255, 255, 255));
        MinLbl.setText("-");
        MinLbl.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                MinLblMouseMoved(evt);
            }
        });
        MinLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MinLblMouseClicked(evt);
            }
        });
        jPanel1.add(MinLbl);
        MinLbl.setBounds(1180, 0, 31, 58);

        jPanel2.setBackground(new java.awt.Color(133, 1, 41));
        jPanel2.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setLayout(null);

        OrdersLbl.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        OrdersLbl.setForeground(new java.awt.Color(255, 255, 255));
        OrdersLbl.setText("Orders");
        jPanel3.add(OrdersLbl);
        OrdersLbl.setBounds(50, 14, 140, 30);

        btnSignOut.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSignOut.setForeground(new java.awt.Color(255, 255, 255));
        btnSignOut.setText("Sign Out");
        btnSignOut.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(133, 1, 41), 3, true));
        btnSignOut.setContentAreaFilled(false);
        btnSignOut.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                btnSignOutMouseMoved(evt);
            }
        });
        btnSignOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignOutActionPerformed(evt);
            }
        });
        jPanel3.add(btnSignOut);
        btnSignOut.setBounds(990, 10, 90, 30);

        jPanel2.add(jPanel3);
        jPanel3.setBounds(0, 0, 1100, 60);

        PreviousBtn.setBackground(new java.awt.Color(168, 153, 104));
        PreviousBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        PreviousBtn.setText("Previous");
        PreviousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousBtnActionPerformed(evt);
            }
        });
        jPanel2.add(PreviousBtn);
        PreviousBtn.setBounds(180, 90, 100, 29);

        NextBtn.setBackground(new java.awt.Color(168, 153, 104));
        NextBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        NextBtn.setText("Next");
        NextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextBtnActionPerformed(evt);
            }
        });
        jPanel2.add(NextBtn);
        NextBtn.setBounds(310, 90, 100, 29);

        FirstBtn.setBackground(new java.awt.Color(168, 153, 104));
        FirstBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        FirstBtn.setText("First");
        FirstBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstBtnActionPerformed(evt);
            }
        });
        jPanel2.add(FirstBtn);
        FirstBtn.setBounds(180, 130, 100, 29);

        LastBtn.setBackground(new java.awt.Color(168, 153, 104));
        LastBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LastBtn.setText("Last");
        LastBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LastBtnActionPerformed(evt);
            }
        });
        jPanel2.add(LastBtn);
        LastBtn.setBounds(310, 130, 100, 29);

        IncomingOrdersTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Number", "Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        IncomingOrdersTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IncomingOrdersTblMouseClicked(evt);
            }
        });
        IncomingOrdersTbl.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                IncomingOrdersTblPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(IncomingOrdersTbl);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(80, 180, 440, 280);

        SelectedOrderTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(SelectedOrderTbl);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(582, 92, 440, 370);

        ExportToExcelBtn.setBackground(new java.awt.Color(168, 153, 104));
        ExportToExcelBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ExportToExcelBtn.setText("Export To Excel");
        ExportToExcelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportToExcelBtnActionPerformed(evt);
            }
        });
        jPanel2.add(ExportToExcelBtn);
        ExportToExcelBtn.setBounds(310, 480, 140, 29);

        ProcessOrderBtn1.setBackground(new java.awt.Color(168, 153, 104));
        ProcessOrderBtn1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ProcessOrderBtn1.setText("Process Order");
        ProcessOrderBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessOrderBtn1ActionPerformed(evt);
            }
        });
        jPanel2.add(ProcessOrderBtn1);
        ProcessOrderBtn1.setBounds(150, 480, 130, 29);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(90, 100, 1090, 540);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Lifestyle_Overlay.jpg"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 1270, 730);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1270, 730);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitLblMouseClicked
        System.exit(0);
    }//GEN-LAST:event_ExitLblMouseClicked

    private void MinLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinLblMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_MinLblMouseClicked

    private void btnSignOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignOutActionPerformed
        LoginPage lp = new LoginPage();
        lp.signOut(this);
    }//GEN-LAST:event_btnSignOutActionPerformed

    private void IncomingOrdersTblPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_IncomingOrdersTblPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_IncomingOrdersTblPropertyChange

    private void IncomingOrdersTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IncomingOrdersTblMouseClicked
        row = IncomingOrdersTbl.getSelectedRow();
        displayProducts(row);
    }//GEN-LAST:event_IncomingOrdersTblMouseClicked

    private void PreviousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousBtnActionPerformed
        if (IncomingOrdersTbl.getSelectedRow() != 0) {
            int prevRow = IncomingOrdersTbl.getSelectedRow() - 1;
            IncomingOrdersTbl.setRowSelectionInterval(prevRow, prevRow);

            row = IncomingOrdersTbl.getSelectedRow();
            displayProducts(row);
        } else {
            IncomingOrdersTbl.setRowSelectionInterval(0, 0);

            row = IncomingOrdersTbl.getSelectedRow();
            displayProducts(row);
        }
    }//GEN-LAST:event_PreviousBtnActionPerformed

    private void FirstBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstBtnActionPerformed
        IncomingOrdersTbl.setRowSelectionInterval(0, 0);

        row = IncomingOrdersTbl.getSelectedRow();
        displayProducts(row);
    }//GEN-LAST:event_FirstBtnActionPerformed

    private void NextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextBtnActionPerformed
        int lastRow = IncomingOrdersTbl.getRowCount();
        if (IncomingOrdersTbl.getSelectedRow() != lastRow) {
            int nextRow = IncomingOrdersTbl.getSelectedRow() + 1;
            IncomingOrdersTbl.setRowSelectionInterval(nextRow, nextRow);

            row = IncomingOrdersTbl.getSelectedRow();
            displayProducts(row);
        } else {
            IncomingOrdersTbl.setRowSelectionInterval(lastRow - 1, lastRow - 1);

            row = IncomingOrdersTbl.getSelectedRow();
            displayProducts(row);
        }
    }//GEN-LAST:event_NextBtnActionPerformed

    private void LastBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LastBtnActionPerformed
        int lastRow = IncomingOrdersTbl.getRowCount();
        IncomingOrdersTbl.setRowSelectionInterval(lastRow - 1, lastRow - 1);

        row = IncomingOrdersTbl.getSelectedRow();
        displayProducts(row);
    }//GEN-LAST:event_LastBtnActionPerformed

    private void ExitLblMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitLblMouseMoved
        ExitLbl.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_ExitLblMouseMoved

    private void MinLblMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinLblMouseMoved
        MinLbl.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_MinLblMouseMoved

    private void btnSignOutMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSignOutMouseMoved
        btnSignOut.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btnSignOutMouseMoved

    private void ExportToExcelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportToExcelBtnActionPerformed
        row = IncomingOrdersTbl.getSelectedRow();
        toExcel(row);
        JOptionPane.showMessageDialog(null, "File created");

    }//GEN-LAST:event_ExportToExcelBtnActionPerformed

    private void ProcessOrderBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessOrderBtn1ActionPerformed
        processOrder(IncomingOrdersTbl.getSelectedRow());
    }//GEN-LAST:event_ProcessOrderBtn1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ExitLbl;
    private javax.swing.JButton ExportToExcelBtn;
    private javax.swing.JButton FirstBtn;
    private javax.swing.JTable IncomingOrdersTbl;
    private javax.swing.JButton LastBtn;
    private javax.swing.JLabel MinLbl;
    private javax.swing.JButton NextBtn;
    private javax.swing.JLabel OrdersLbl;
    private javax.swing.JButton PreviousBtn;
    private javax.swing.JButton ProcessOrderBtn1;
    private javax.swing.JTable SelectedOrderTbl;
    private javax.swing.JButton btnSignOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void displayProducts(int row) {
        //System.out.println("selected row: " + row);
        int order_ID = Integer.parseInt(IncomingOrdersTbl.getValueAt(row, 0) + "");
        //System.out.println(order_ID);
        try {
            Statement st_2 = conn.createStatement();
            ResultSet rs_2 = st_2.executeQuery("SELECT * FROM OrderDetails WHERE order_ID=" + order_ID);
            DefaultTableModel model = new DefaultTableModel(new Object[]{"Product", "Number of Crates"}, 0);

            while (rs_2.next()) {
                Object product[] = {getProductName(rs_2.getInt("product_ID")), rs_2.getInt("od_CratesOrdered")};
                productList.add(product);
                model.addRow(productList.get(productList.size() - 1));
            }
            SelectedOrderTbl.setModel(model);
        } catch (SQLException e) {
            Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void displayOrders() throws SQLException {
        st = conn.createStatement();
        rs = st.executeQuery("SELECT * FROM Orders ORDER BY order_Status, order_Date");
        DefaultTableModel model = new DefaultTableModel(new Object[]{"Order ID", "Order Date", "Store", "Urgency", "Order Status"}, 0);

        while (rs.next()) {
            //System.out.println(a++);
            //System.out.println(rs.getInt("order_ID") + "," + rs.getInt("order_Status"));

            if (rs.getInt("order_Status") > 0) {
                Object order[] = {rs.getInt("order_ID"), rs.getDate("order_Date"), getStoreName(rs.getInt("store_ID")), rs.getString("urgency"), "Complete"};
                orderList.add(order);
            } else {
                Object order[] = {rs.getInt("order_ID"), rs.getDate("order_Date"), getStoreName(rs.getInt("store_ID")), rs.getString("urgency"), "Incomplete"};
                orderList.add(order);
            }
            //System.out.println(orderList.size());
            model.addRow(orderList.get(orderList.size() - 1));
        }
        IncomingOrdersTbl.setModel(model);
    }

    private String getStoreName(int ID) {
        String store_Name = null;
        Statement st_1;
        ResultSet rs_1;

        try {
            st_1 = conn.createStatement();
            rs_1 = st_1.executeQuery("SELECT store_Name FROM Store WHERE store_ID =" + ID);
            while (rs_1.next()) {
                store_Name = rs_1.getString("store_Name");
            }

        } catch (SQLException e) {
            Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, e);
            //System.out.println("Here");
        }
        return store_Name;
    }

    private String getProductName(int ID) {
        String product_Name = null;
        Statement st_3;
        ResultSet rs_3;

        try {
            st_3 = conn.createStatement();
            rs_3 = st_3.executeQuery("SELECT product_Name FROM Product WHERE product_ID =" + ID);
            while (rs_3.next()) {
                product_Name = rs_3.getString("product_Name");
            }

        } catch (SQLException e) {
            Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, e);
            //System.out.println("Here");
        }
        return product_Name;
    }

    private void processOrder(int row) {
        int order_ID = Integer.parseInt(IncomingOrdersTbl.getValueAt(row, 0) + "");
        try {
            st = conn.createStatement();
            st.executeUpdate("UPDATE Orders SET order_Status = 1 WHERE order_ID = " + order_ID);
            JOptionPane.showMessageDialog(null, "Order " + order_ID + " processed!");
            displayOrders();
        } catch (SQLException e) {
            Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void toExcel(int row) {
        int order_ID = Integer.parseInt(IncomingOrdersTbl.getValueAt(row, 0) + "");
        String file = System.getProperty("user.home") + ("/Desktop/Order " + order_ID + ".csv");

        //File file = new File("Order "+order_ID);
        try {
            TableModel model = SelectedOrderTbl.getModel();
            FileWriter excel = new FileWriter(file);

            for (int i = 0; i < model.getColumnCount(); i++) {
                excel.write(model.getColumnName(i) + ",");
            }

            excel.write("\n");

            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    excel.write(model.getValueAt(i, j).toString() + ",");
                }
                excel.write("\n");
            }

            excel.close();

        } catch (IOException e) {
            System.out.println(e);
        }
    }
}
