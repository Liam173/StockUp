
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Liam
 * @author Henry
 * @author Kyle
 */
public class AdminPage extends javax.swing.JFrame {

    /**
     * Creates new form AdminPage
     */
    Connection conn = null;
    Statement st = null;
    ResultSet rs = null;
    ArrayList<Object[]> productList = new ArrayList();
    ArrayList<Object[]> staffList = new ArrayList();
    ArrayList<Object[]> orderList = new ArrayList();
    ArrayList<Object[]> storeList = new ArrayList();

    String adminUsername = "";

    public AdminPage(LoginPage login, ResultSet rs, Connection conn) {
        login.dispose();
        initComponents();
        setSize(1270, 730);

        setPreferredStates();

        try {
            this.conn = conn;
            st = this.conn.createStatement();
            adminUsername = rs.getString("username");
            AdminNameLbl.setText(rs.getString("admin_Name") + " " + rs.getString("admin_Surname"));
            populateStoresDropdown();
            displayTable();
            displayStores();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        ordersInfoVisible(false);
        freezerVisible(false);
        staffInfoVisible(true);
        setForegroundColourToWhite();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        MinLbl = new javax.swing.JLabel();
        ExitLbl = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        AdminNameLbl = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        LblStaffInfo = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        LblOrdersInfo = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        LblRefridgerator = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        LblS = new javax.swing.JLabel();
        LblTaff = new javax.swing.JLabel();
        LblNformation = new javax.swing.JLabel();
        LblI = new javax.swing.JLabel();
        LblO = new javax.swing.JLabel();
        LblRders = new javax.swing.JLabel();
        LblAnagement = new javax.swing.JLabel();
        LblM = new javax.swing.JLabel();
        LblReezer = new javax.swing.JLabel();
        LblF = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        JTOrdersInfo = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        JTFreezerManagement = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        JTStaffInfo = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        DispatchUserLbl = new javax.swing.JLabel();
        DispatchPasswordLbl = new javax.swing.JLabel();
        DispatchUser_Name_Tf = new javax.swing.JTextField();
        DispatchUserDeleteBtn = new javax.swing.JButton();
        DispatchUserAddBtn = new javax.swing.JButton();
        ScrollPane_AddDispatchUserWarnings = new javax.swing.JScrollPane();
        Ta_AddDispatchUserWarnings = new javax.swing.JTextArea();
        DispatchUser_Password_Pf = new javax.swing.JPasswordField();
        StoreUsernameLbl5 = new javax.swing.JLabel();
        DispatchUser_Username_Tf = new javax.swing.JTextField();
        DispatchUser_Surname_Tf = new javax.swing.JTextField();
        password_warning_lbl5 = new javax.swing.JLabel();
        DispatchUser_Name_Lbl1 = new javax.swing.JLabel();
        DispatchUser_Surame_Lbl1 = new javax.swing.JLabel();
        password_warning_lbl4 = new javax.swing.JLabel();
        password_warning_lbl6 = new javax.swing.JLabel();
        showPassword_AddDispatchUser_Lbl = new javax.swing.JLabel();
        StoreUserLbl = new javax.swing.JLabel();
        AdminUserLbl = new javax.swing.JLabel();
        StorePasswordLbl = new javax.swing.JLabel();
        StoreIdentityLbl = new javax.swing.JLabel();
        AdminUsernameLbl = new javax.swing.JLabel();
        AdminPasswordLbl = new javax.swing.JLabel();
        StoreUser_Username_Tf = new javax.swing.JTextField();
        AdminNameTf = new javax.swing.JTextField();
        StoreUser_StoreName_Cb = new javax.swing.JComboBox<>();
        StoreUserAddBtn = new javax.swing.JButton();
        StoreUserDeleteBtn = new javax.swing.JButton();
        AdminUserAddBtn = new javax.swing.JButton();
        AdminUserDeleteBtn = new javax.swing.JButton();
        StoreUsernameLbl1 = new javax.swing.JLabel();
        StoreUsernameLbl2 = new javax.swing.JLabel();
        StoreUsernameLbl3 = new javax.swing.JLabel();
        StoreUser_Name_Tf = new javax.swing.JTextField();
        StoreUser_Surname_Tf = new javax.swing.JTextField();
        password_warning_lbl1 = new javax.swing.JLabel();
        password_warning_lbl3 = new javax.swing.JLabel();
        password_warning_lbl2 = new javax.swing.JLabel();
        ScrollPane_AddStoreUserWarnings = new javax.swing.JScrollPane();
        Ta_AddStoreUserWarnings = new javax.swing.JTextArea();
        ScrollPane_AddAdminUserWarnings = new javax.swing.JScrollPane();
        Ta_AddAdminUserWarnings = new javax.swing.JTextArea();
        StoreUser_Password_Pf = new javax.swing.JPasswordField();
        showPassword_AddStoreUser_Lbl = new javax.swing.JLabel();
        DispatchUser_Name_Lbl = new javax.swing.JLabel();
        DispatchUser_Surame_Lbl = new javax.swing.JLabel();
        AdminUsernameTf = new javax.swing.JTextField();
        AdminSurnameTf = new javax.swing.JTextField();
        AdminUser_Password_Pf = new javax.swing.JPasswordField();
        password_warning_lbl7 = new javax.swing.JLabel();
        password_warning_lbl8 = new javax.swing.JLabel();
        password_warning_lbl9 = new javax.swing.JLabel();
        showPassword_AddAdminUser_Lbl = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        StoreNameLbl = new javax.swing.JLabel();
        ContactNumberLbl = new javax.swing.JLabel();
        StoreAddressLbl = new javax.swing.JLabel();
        StoreNameTf = new javax.swing.JTextField();
        ContactNumberTf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        StoreAddressTa = new javax.swing.JTextArea();
        AddStoreBtn = new javax.swing.JButton();
        DeleteStoreBtn = new javax.swing.JButton();
        warning_Store_Name_Lbl = new javax.swing.JLabel();
        warning_Store_Number_Lbl = new javax.swing.JLabel();
        warning_Store_Address_Lbl = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        JTStores = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        ProductNameLbl = new javax.swing.JLabel();
        ProductNameTf = new javax.swing.JTextField();
        UnitsPerCrateTf = new javax.swing.JTextField();
        AddProductBtn = new javax.swing.JButton();
        DeleteProductBtn = new javax.swing.JButton();
        lblWarningUnits = new javax.swing.JLabel();
        UnitsPerCrateLbl1 = new javax.swing.JLabel();
        lblWarningProduct = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProductTbl = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        btnSignOut = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        MinLbl.setFont(new java.awt.Font("Leelawadee UI", 1, 48)); // NOI18N
        MinLbl.setForeground(new java.awt.Color(255, 255, 255));
        MinLbl.setText("-");
        MinLbl.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                MinLblMouseMoved(evt);
            }
        });
        MinLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MinLblMouseClicked(evt);
            }
        });
        jPanel1.add(MinLbl);
        MinLbl.setBounds(1180, 0, 19, 64);

        ExitLbl.setFont(new java.awt.Font("Leelawadee UI", 1, 48)); // NOI18N
        ExitLbl.setForeground(new java.awt.Color(255, 255, 255));
        ExitLbl.setText("x");
        ExitLbl.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ExitLblMouseMoved(evt);
            }
        });
        ExitLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExitLblMouseClicked(evt);
            }
        });
        jPanel1.add(ExitLbl);
        ExitLbl.setBounds(1220, 0, 27, 64);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(null);

        jPanel8.setBackground(new java.awt.Color(133, 1, 41));
        jPanel8.setLayout(null);

        AdminNameLbl.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        AdminNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        AdminNameLbl.setText("AdminName");
        jPanel8.add(AdminNameLbl);
        AdminNameLbl.setBounds(20, 20, 270, 70);
        jPanel8.add(jPanel10);
        jPanel10.setBounds(20, 85, 290, 5);

        jPanel11.setBackground(new java.awt.Color(133, 1, 41));
        jPanel11.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        jPanel11.setLayout(null);

        LblStaffInfo.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        LblStaffInfo.setForeground(new java.awt.Color(255, 255, 255));
        LblStaffInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblStaffInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_Staff_50px_1.png"))); // NOI18N
        LblStaffInfo.setText("    Staff Information");
        LblStaffInfo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                LblStaffInfoMouseMoved(evt);
            }
        });
        LblStaffInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LblStaffInfoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LblStaffInfoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LblStaffInfoMouseExited(evt);
            }
        });
        jPanel11.add(LblStaffInfo);
        LblStaffInfo.setBounds(-10, 0, 330, 70);

        jPanel8.add(jPanel11);
        jPanel11.setBounds(0, 130, 330, 70);

        jPanel12.setBackground(new java.awt.Color(133, 1, 41));
        jPanel12.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        jPanel12.setLayout(null);

        LblOrdersInfo.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        LblOrdersInfo.setForeground(new java.awt.Color(255, 255, 255));
        LblOrdersInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblOrdersInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_Course_52px.png"))); // NOI18N
        LblOrdersInfo.setText("   Orders Information");
        LblOrdersInfo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                LblOrdersInfoMouseMoved(evt);
            }
        });
        LblOrdersInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LblOrdersInfoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LblOrdersInfoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LblOrdersInfoMouseExited(evt);
            }
        });
        jPanel12.add(LblOrdersInfo);
        LblOrdersInfo.setBounds(0, 0, 320, 70);

        jPanel8.add(jPanel12);
        jPanel12.setBounds(0, 200, 330, 70);

        jPanel13.setBackground(new java.awt.Color(133, 1, 41));
        jPanel13.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 255, 255)));
        jPanel13.setLayout(null);

        LblRefridgerator.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        LblRefridgerator.setForeground(new java.awt.Color(255, 255, 255));
        LblRefridgerator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblRefridgerator.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/icons8_Library_50px_1.png"))); // NOI18N
        LblRefridgerator.setText("  Freezer Management");
        LblRefridgerator.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                LblRefridgeratorMouseMoved(evt);
            }
        });
        LblRefridgerator.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LblRefridgeratorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LblRefridgeratorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LblRefridgeratorMouseExited(evt);
            }
        });
        jPanel13.add(LblRefridgerator);
        LblRefridgerator.setBounds(10, 4, 310, 60);

        jPanel8.add(jPanel13);
        jPanel13.setBounds(0, 270, 330, 70);

        jPanel7.add(jPanel8);
        jPanel8.setBounds(0, 0, 330, 520);

        jPanel9.setBackground(new java.awt.Color(0, 0, 0));
        jPanel9.setLayout(null);

        LblS.setFont(new java.awt.Font("Viner Hand ITC", 1, 65)); // NOI18N
        LblS.setForeground(new java.awt.Color(255, 255, 255));
        LblS.setText("S");
        jPanel9.add(LblS);
        LblS.setBounds(230, 20, 50, 70);

        LblTaff.setFont(new java.awt.Font("Tw Cen MT", 0, 35)); // NOI18N
        LblTaff.setForeground(new java.awt.Color(255, 255, 255));
        LblTaff.setText("taff");
        jPanel9.add(LblTaff);
        LblTaff.setBounds(270, 40, 60, 30);

        LblNformation.setFont(new java.awt.Font("Tw Cen MT", 0, 35)); // NOI18N
        LblNformation.setForeground(new java.awt.Color(255, 255, 255));
        LblNformation.setText("nformation");
        jPanel9.add(LblNformation);
        LblNformation.setBounds(360, 30, 210, 50);

        LblI.setFont(new java.awt.Font("Viner Hand ITC", 1, 65)); // NOI18N
        LblI.setForeground(new java.awt.Color(255, 255, 255));
        LblI.setText("I");
        jPanel9.add(LblI);
        LblI.setBounds(340, 20, 30, 70);

        LblO.setFont(new java.awt.Font("Viner Hand ITC", 1, 65)); // NOI18N
        LblO.setText("O");
        jPanel9.add(LblO);
        LblO.setBounds(220, 20, 40, 70);

        LblRders.setFont(new java.awt.Font("Tw Cen MT", 0, 35)); // NOI18N
        LblRders.setText("rders");
        jPanel9.add(LblRders);
        LblRders.setBounds(250, 40, 110, 30);

        LblAnagement.setFont(new java.awt.Font("Tw Cen MT", 0, 35)); // NOI18N
        LblAnagement.setText("anagement");
        jPanel9.add(LblAnagement);
        LblAnagement.setBounds(390, 40, 170, 30);

        LblM.setFont(new java.awt.Font("Viner Hand ITC", 1, 65)); // NOI18N
        LblM.setText("M");
        jPanel9.add(LblM);
        LblM.setBounds(340, 20, 72, 70);

        LblReezer.setFont(new java.awt.Font("Tw Cen MT", 0, 35)); // NOI18N
        LblReezer.setText("reezer");
        jPanel9.add(LblReezer);
        LblReezer.setBounds(230, 40, 110, 30);

        LblF.setFont(new java.awt.Font("Viner Hand ITC", 1, 65)); // NOI18N
        LblF.setText("F");
        jPanel9.add(LblF);
        LblF.setBounds(200, 20, 50, 70);

        jPanel7.add(jPanel9);
        jPanel9.setBounds(330, 30, 710, 100);

        JTOrdersInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(JTOrdersInfo);

        jPanel7.add(jScrollPane4);
        jScrollPane4.setBounds(370, 160, 630, 330);

        JTFreezerManagement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(JTFreezerManagement);

        jPanel7.add(jScrollPane6);
        jScrollPane6.setBounds(370, 162, 630, 330);

        JTStaffInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(JTStaffInfo);

        jPanel7.add(jScrollPane3);
        jScrollPane3.setBounds(370, 160, 630, 330);

        jTabbedPane1.addTab("Home", jPanel7);

        jPanel2.setBackground(new java.awt.Color(133, 1, 41));
        jPanel2.setLayout(null);

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setLayout(null);

        DispatchUserLbl.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        DispatchUserLbl.setForeground(new java.awt.Color(255, 255, 255));
        DispatchUserLbl.setText("Dispatch User");
        jPanel5.add(DispatchUserLbl);
        DispatchUserLbl.setBounds(90, 30, 170, 40);

        DispatchPasswordLbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        DispatchPasswordLbl.setForeground(new java.awt.Color(255, 255, 255));
        DispatchPasswordLbl.setText("Password:");
        jPanel5.add(DispatchPasswordLbl);
        DispatchPasswordLbl.setBounds(40, 300, 90, 30);

        DispatchUser_Name_Tf.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel5.add(DispatchUser_Name_Tf);
        DispatchUser_Name_Tf.setBounds(130, 100, 150, 30);

        DispatchUserDeleteBtn.setBackground(new java.awt.Color(91, 0, 26));
        DispatchUserDeleteBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        DispatchUserDeleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        DispatchUserDeleteBtn.setText("Delete User");
        DispatchUserDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DispatchUserDeleteBtnActionPerformed(evt);
            }
        });
        jPanel5.add(DispatchUserDeleteBtn);
        DispatchUserDeleteBtn.setBounds(200, 413, 110, 30);

        DispatchUserAddBtn.setBackground(new java.awt.Color(91, 0, 26));
        DispatchUserAddBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        DispatchUserAddBtn.setForeground(new java.awt.Color(255, 255, 255));
        DispatchUserAddBtn.setText("Add User");
        DispatchUserAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DispatchUserAddBtnActionPerformed(evt);
            }
        });
        jPanel5.add(DispatchUserAddBtn);
        DispatchUserAddBtn.setBounds(40, 413, 110, 30);

        ScrollPane_AddDispatchUserWarnings.setBorder(null);

        Ta_AddDispatchUserWarnings.setEditable(false);
        Ta_AddDispatchUserWarnings.setBackground(new java.awt.Color(0, 0, 0));
        Ta_AddDispatchUserWarnings.setColumns(20);
        Ta_AddDispatchUserWarnings.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Ta_AddDispatchUserWarnings.setForeground(new java.awt.Color(255, 0, 0));
        Ta_AddDispatchUserWarnings.setRows(5);
        Ta_AddDispatchUserWarnings.setText("Warnings");
        ScrollPane_AddDispatchUserWarnings.setViewportView(Ta_AddDispatchUserWarnings);

        jPanel5.add(ScrollPane_AddDispatchUserWarnings);
        ScrollPane_AddDispatchUserWarnings.setBounds(40, 450, 260, 130);

        DispatchUser_Password_Pf.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jPanel5.add(DispatchUser_Password_Pf);
        DispatchUser_Password_Pf.setBounds(130, 300, 150, 30);

        StoreUsernameLbl5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        StoreUsernameLbl5.setForeground(new java.awt.Color(255, 255, 255));
        StoreUsernameLbl5.setText("Username:");
        jPanel5.add(StoreUsernameLbl5);
        StoreUsernameLbl5.setBounds(40, 250, 90, 30);
        jPanel5.add(DispatchUser_Username_Tf);
        DispatchUser_Username_Tf.setBounds(130, 250, 150, 30);

        DispatchUser_Surname_Tf.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel5.add(DispatchUser_Surname_Tf);
        DispatchUser_Surname_Tf.setBounds(130, 150, 150, 30);

        password_warning_lbl5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        password_warning_lbl5.setForeground(new java.awt.Color(255, 0, 0));
        password_warning_lbl5.setText("One special character (@#$%^&+=)");
        jPanel5.add(password_warning_lbl5);
        password_warning_lbl5.setBounds(130, 370, 202, 30);

        DispatchUser_Name_Lbl1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        DispatchUser_Name_Lbl1.setForeground(new java.awt.Color(255, 255, 255));
        DispatchUser_Name_Lbl1.setText("Name:");
        jPanel5.add(DispatchUser_Name_Lbl1);
        DispatchUser_Name_Lbl1.setBounds(70, 110, 40, 15);

        DispatchUser_Surame_Lbl1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        DispatchUser_Surame_Lbl1.setForeground(new java.awt.Color(255, 255, 255));
        DispatchUser_Surame_Lbl1.setText("Surame:");
        jPanel5.add(DispatchUser_Surame_Lbl1);
        DispatchUser_Surame_Lbl1.setBounds(60, 160, 50, 15);

        password_warning_lbl4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        password_warning_lbl4.setForeground(new java.awt.Color(255, 0, 0));
        password_warning_lbl4.setText("Minimum 8 characters");
        jPanel5.add(password_warning_lbl4);
        password_warning_lbl4.setBounds(130, 340, 170, 20);

        password_warning_lbl6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        password_warning_lbl6.setForeground(new java.awt.Color(255, 0, 0));
        password_warning_lbl6.setText("One uppercase, one lowercase");
        jPanel5.add(password_warning_lbl6);
        password_warning_lbl6.setBounds(130, 360, 180, 15);

        showPassword_AddDispatchUser_Lbl.setFont(new java.awt.Font("Leelawadee UI", 1, 48)); // NOI18N
        showPassword_AddDispatchUser_Lbl.setForeground(new java.awt.Color(255, 255, 255));
        showPassword_AddDispatchUser_Lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/show-password-white.png"))); // NOI18N
        showPassword_AddDispatchUser_Lbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showPassword_AddDispatchUser_LblMouseClicked(evt);
            }
        });
        jPanel5.add(showPassword_AddDispatchUser_Lbl);
        showPassword_AddDispatchUser_Lbl.setBounds(290, 290, 30, 50);

        jPanel2.add(jPanel5);
        jPanel5.setBounds(350, 0, 340, 540);

        StoreUserLbl.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        StoreUserLbl.setForeground(new java.awt.Color(255, 255, 255));
        StoreUserLbl.setText("Store User");
        jPanel2.add(StoreUserLbl);
        StoreUserLbl.setBounds(110, 30, 130, 30);

        AdminUserLbl.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        AdminUserLbl.setForeground(new java.awt.Color(255, 255, 255));
        AdminUserLbl.setText("Admin User");
        jPanel2.add(AdminUserLbl);
        AdminUserLbl.setBounds(790, 30, 150, 40);

        StorePasswordLbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        StorePasswordLbl.setForeground(new java.awt.Color(255, 255, 255));
        StorePasswordLbl.setText("Password:");
        jPanel2.add(StorePasswordLbl);
        StorePasswordLbl.setBounds(60, 310, 80, 20);

        StoreIdentityLbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        StoreIdentityLbl.setForeground(new java.awt.Color(255, 255, 255));
        StoreIdentityLbl.setText("Store:");
        jPanel2.add(StoreIdentityLbl);
        StoreIdentityLbl.setBounds(90, 210, 60, 15);

        AdminUsernameLbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AdminUsernameLbl.setForeground(new java.awt.Color(255, 255, 255));
        AdminUsernameLbl.setText("Username:");
        jPanel2.add(AdminUsernameLbl);
        AdminUsernameLbl.setBounds(740, 250, 70, 30);

        AdminPasswordLbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AdminPasswordLbl.setForeground(new java.awt.Color(255, 255, 255));
        AdminPasswordLbl.setText("Password:");
        jPanel2.add(AdminPasswordLbl);
        AdminPasswordLbl.setBounds(740, 300, 80, 30);
        jPanel2.add(StoreUser_Username_Tf);
        StoreUser_Username_Tf.setBounds(140, 250, 150, 30);

        AdminNameTf.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel2.add(AdminNameTf);
        AdminNameTf.setBounds(820, 100, 150, 30);

        jPanel2.add(StoreUser_StoreName_Cb);
        StoreUser_StoreName_Cb.setBounds(140, 200, 150, 30);

        StoreUserAddBtn.setBackground(new java.awt.Color(46, 50, 64));
        StoreUserAddBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        StoreUserAddBtn.setForeground(new java.awt.Color(255, 255, 255));
        StoreUserAddBtn.setText("Add User");
        StoreUserAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StoreUserAddBtnActionPerformed(evt);
            }
        });
        jPanel2.add(StoreUserAddBtn);
        StoreUserAddBtn.setBounds(40, 413, 110, 30);

        StoreUserDeleteBtn.setBackground(new java.awt.Color(46, 50, 64));
        StoreUserDeleteBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        StoreUserDeleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        StoreUserDeleteBtn.setText("Delete User");
        StoreUserDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StoreUserDeleteBtnActionPerformed(evt);
            }
        });
        jPanel2.add(StoreUserDeleteBtn);
        StoreUserDeleteBtn.setBounds(200, 413, 110, 30);

        AdminUserAddBtn.setBackground(new java.awt.Color(46, 50, 64));
        AdminUserAddBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AdminUserAddBtn.setForeground(new java.awt.Color(255, 255, 255));
        AdminUserAddBtn.setText("Add User");
        AdminUserAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminUserAddBtnActionPerformed(evt);
            }
        });
        jPanel2.add(AdminUserAddBtn);
        AdminUserAddBtn.setBounds(740, 413, 110, 30);

        AdminUserDeleteBtn.setBackground(new java.awt.Color(46, 50, 64));
        AdminUserDeleteBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AdminUserDeleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        AdminUserDeleteBtn.setText("Delete User");
        AdminUserDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminUserDeleteBtnActionPerformed(evt);
            }
        });
        jPanel2.add(AdminUserDeleteBtn);
        AdminUserDeleteBtn.setBounds(890, 413, 110, 30);

        StoreUsernameLbl1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        StoreUsernameLbl1.setForeground(new java.awt.Color(255, 255, 255));
        StoreUsernameLbl1.setText("Username:");
        jPanel2.add(StoreUsernameLbl1);
        StoreUsernameLbl1.setBounds(60, 260, 90, 20);

        StoreUsernameLbl2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        StoreUsernameLbl2.setForeground(new java.awt.Color(255, 255, 255));
        StoreUsernameLbl2.setText("Name:");
        jPanel2.add(StoreUsernameLbl2);
        StoreUsernameLbl2.setBounds(90, 110, 90, 20);

        StoreUsernameLbl3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        StoreUsernameLbl3.setForeground(new java.awt.Color(255, 255, 255));
        StoreUsernameLbl3.setText("Surname:");
        jPanel2.add(StoreUsernameLbl3);
        StoreUsernameLbl3.setBounds(70, 160, 90, 20);
        jPanel2.add(StoreUser_Name_Tf);
        StoreUser_Name_Tf.setBounds(140, 100, 150, 30);
        jPanel2.add(StoreUser_Surname_Tf);
        StoreUser_Surname_Tf.setBounds(140, 150, 150, 30);

        password_warning_lbl1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        password_warning_lbl1.setForeground(new java.awt.Color(255, 0, 0));
        password_warning_lbl1.setText("Minimum 8 characters");
        jPanel2.add(password_warning_lbl1);
        password_warning_lbl1.setBounds(140, 340, 170, 20);

        password_warning_lbl3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        password_warning_lbl3.setForeground(new java.awt.Color(255, 0, 0));
        password_warning_lbl3.setText("One special character (@#$%^&+=)");
        jPanel2.add(password_warning_lbl3);
        password_warning_lbl3.setBounds(140, 370, 210, 30);

        password_warning_lbl2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        password_warning_lbl2.setForeground(new java.awt.Color(255, 0, 0));
        password_warning_lbl2.setText("One uppercase, one lowercase");
        jPanel2.add(password_warning_lbl2);
        password_warning_lbl2.setBounds(140, 360, 190, 15);

        ScrollPane_AddStoreUserWarnings.setBorder(null);

        Ta_AddStoreUserWarnings.setEditable(false);
        Ta_AddStoreUserWarnings.setBackground(new java.awt.Color(133, 1, 41));
        Ta_AddStoreUserWarnings.setColumns(20);
        Ta_AddStoreUserWarnings.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Ta_AddStoreUserWarnings.setForeground(new java.awt.Color(255, 0, 0));
        Ta_AddStoreUserWarnings.setRows(5);
        Ta_AddStoreUserWarnings.setText("Warnings");
        ScrollPane_AddStoreUserWarnings.setViewportView(Ta_AddStoreUserWarnings);

        jPanel2.add(ScrollPane_AddStoreUserWarnings);
        ScrollPane_AddStoreUserWarnings.setBounds(40, 450, 250, 130);

        ScrollPane_AddAdminUserWarnings.setBorder(null);

        Ta_AddAdminUserWarnings.setEditable(false);
        Ta_AddAdminUserWarnings.setBackground(new java.awt.Color(133, 1, 41));
        Ta_AddAdminUserWarnings.setColumns(20);
        Ta_AddAdminUserWarnings.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Ta_AddAdminUserWarnings.setForeground(new java.awt.Color(255, 0, 0));
        Ta_AddAdminUserWarnings.setRows(5);
        Ta_AddAdminUserWarnings.setText("Warnings");
        ScrollPane_AddAdminUserWarnings.setViewportView(Ta_AddAdminUserWarnings);

        jPanel2.add(ScrollPane_AddAdminUserWarnings);
        ScrollPane_AddAdminUserWarnings.setBounds(740, 450, 260, 130);

        StoreUser_Password_Pf.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jPanel2.add(StoreUser_Password_Pf);
        StoreUser_Password_Pf.setBounds(140, 300, 150, 30);

        showPassword_AddStoreUser_Lbl.setFont(new java.awt.Font("Leelawadee UI", 1, 48)); // NOI18N
        showPassword_AddStoreUser_Lbl.setForeground(new java.awt.Color(255, 255, 255));
        showPassword_AddStoreUser_Lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/show-password-white.png"))); // NOI18N
        showPassword_AddStoreUser_Lbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showPassword_AddStoreUser_LblMouseClicked(evt);
            }
        });
        jPanel2.add(showPassword_AddStoreUser_Lbl);
        showPassword_AddStoreUser_Lbl.setBounds(300, 290, 30, 50);

        DispatchUser_Name_Lbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        DispatchUser_Name_Lbl.setForeground(new java.awt.Color(255, 255, 255));
        DispatchUser_Name_Lbl.setText("Name:");
        jPanel2.add(DispatchUser_Name_Lbl);
        DispatchUser_Name_Lbl.setBounds(760, 110, 40, 15);

        DispatchUser_Surame_Lbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        DispatchUser_Surame_Lbl.setForeground(new java.awt.Color(255, 255, 255));
        DispatchUser_Surame_Lbl.setText("Surname:");
        jPanel2.add(DispatchUser_Surame_Lbl);
        DispatchUser_Surame_Lbl.setBounds(740, 160, 60, 15);

        AdminUsernameTf.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel2.add(AdminUsernameTf);
        AdminUsernameTf.setBounds(820, 250, 150, 30);

        AdminSurnameTf.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jPanel2.add(AdminSurnameTf);
        AdminSurnameTf.setBounds(820, 150, 150, 30);
        jPanel2.add(AdminUser_Password_Pf);
        AdminUser_Password_Pf.setBounds(820, 300, 150, 30);

        password_warning_lbl7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        password_warning_lbl7.setForeground(new java.awt.Color(255, 0, 0));
        password_warning_lbl7.setText("Minimum 8 characters");
        jPanel2.add(password_warning_lbl7);
        password_warning_lbl7.setBounds(820, 340, 170, 20);

        password_warning_lbl8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        password_warning_lbl8.setForeground(new java.awt.Color(255, 0, 0));
        password_warning_lbl8.setText("One uppercase, one lowercase");
        jPanel2.add(password_warning_lbl8);
        password_warning_lbl8.setBounds(820, 360, 180, 15);

        password_warning_lbl9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        password_warning_lbl9.setForeground(new java.awt.Color(255, 0, 0));
        password_warning_lbl9.setText("One special character (@#$%^&+=)");
        jPanel2.add(password_warning_lbl9);
        password_warning_lbl9.setBounds(820, 370, 202, 30);

        showPassword_AddAdminUser_Lbl.setFont(new java.awt.Font("Leelawadee UI", 1, 48)); // NOI18N
        showPassword_AddAdminUser_Lbl.setForeground(new java.awt.Color(255, 255, 255));
        showPassword_AddAdminUser_Lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/show-password-white.png"))); // NOI18N
        showPassword_AddAdminUser_Lbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showPassword_AddAdminUser_LblMouseClicked(evt);
            }
        });
        jPanel2.add(showPassword_AddAdminUser_Lbl);
        showPassword_AddAdminUser_Lbl.setBounds(980, 290, 30, 50);

        jTabbedPane1.addTab("Add/Delete User", jPanel2);

        jPanel3.setBackground(new java.awt.Color(133, 1, 41));
        jPanel3.setLayout(null);

        StoreNameLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        StoreNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        StoreNameLbl.setText("Store name:");
        jPanel3.add(StoreNameLbl);
        StoreNameLbl.setBounds(380, 80, 100, 30);

        ContactNumberLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ContactNumberLbl.setForeground(new java.awt.Color(255, 255, 255));
        ContactNumberLbl.setText("Contact number:");
        jPanel3.add(ContactNumberLbl);
        ContactNumberLbl.setBounds(350, 120, 118, 30);

        StoreAddressLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        StoreAddressLbl.setForeground(new java.awt.Color(255, 255, 255));
        StoreAddressLbl.setText("Store address:");
        jPanel3.add(StoreAddressLbl);
        StoreAddressLbl.setBounds(370, 170, 110, 30);
        jPanel3.add(StoreNameTf);
        StoreNameTf.setBounds(480, 80, 310, 30);
        jPanel3.add(ContactNumberTf);
        ContactNumberTf.setBounds(480, 120, 310, 30);

        StoreAddressTa.setColumns(20);
        StoreAddressTa.setRows(5);
        jScrollPane1.setViewportView(StoreAddressTa);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(480, 170, 310, 180);

        AddStoreBtn.setBackground(new java.awt.Color(168, 153, 104));
        AddStoreBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        AddStoreBtn.setText("Add");
        AddStoreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStoreBtnActionPerformed(evt);
            }
        });
        jPanel3.add(AddStoreBtn);
        AddStoreBtn.setBounds(580, 380, 120, 30);

        DeleteStoreBtn.setBackground(new java.awt.Color(168, 153, 104));
        DeleteStoreBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DeleteStoreBtn.setText("Delete");
        DeleteStoreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteStoreBtnActionPerformed(evt);
            }
        });
        jPanel3.add(DeleteStoreBtn);
        DeleteStoreBtn.setBounds(110, 390, 110, 30);

        warning_Store_Name_Lbl.setForeground(new java.awt.Color(255, 0, 0));
        warning_Store_Name_Lbl.setText("warning");
        jPanel3.add(warning_Store_Name_Lbl);
        warning_Store_Name_Lbl.setBounds(800, 80, 220, 30);

        warning_Store_Number_Lbl.setForeground(new java.awt.Color(255, 0, 0));
        warning_Store_Number_Lbl.setText("warning");
        jPanel3.add(warning_Store_Number_Lbl);
        warning_Store_Number_Lbl.setBounds(800, 120, 220, 30);

        warning_Store_Address_Lbl.setForeground(new java.awt.Color(255, 0, 0));
        warning_Store_Address_Lbl.setText("warning");
        jPanel3.add(warning_Store_Address_Lbl);
        warning_Store_Address_Lbl.setBounds(800, 160, 220, 30);

        JTStores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(JTStores);

        jPanel3.add(jScrollPane5);
        jScrollPane5.setBounds(20, 30, 320, 330);

        jTabbedPane1.addTab("Add/Delete Store", jPanel3);

        jPanel4.setBackground(new java.awt.Color(133, 1, 41));
        jPanel4.setLayout(null);

        ProductNameLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ProductNameLbl.setForeground(new java.awt.Color(255, 255, 255));
        ProductNameLbl.setText("Product name:");
        jPanel4.add(ProductNameLbl);
        ProductNameLbl.setBounds(540, 150, 110, 30);
        jPanel4.add(ProductNameTf);
        ProductNameTf.setBounds(650, 150, 220, 30);
        jPanel4.add(UnitsPerCrateTf);
        UnitsPerCrateTf.setBounds(650, 200, 220, 30);

        AddProductBtn.setBackground(new java.awt.Color(168, 153, 104));
        AddProductBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        AddProductBtn.setText("Add");
        AddProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProductBtnActionPerformed(evt);
            }
        });
        jPanel4.add(AddProductBtn);
        AddProductBtn.setBounds(710, 240, 100, 30);

        DeleteProductBtn.setBackground(new java.awt.Color(168, 153, 104));
        DeleteProductBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DeleteProductBtn.setText("Delete");
        DeleteProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteProductBtnActionPerformed(evt);
            }
        });
        jPanel4.add(DeleteProductBtn);
        DeleteProductBtn.setBounds(210, 450, 100, 30);

        lblWarningUnits.setBackground(new java.awt.Color(255, 153, 51));
        lblWarningUnits.setForeground(new java.awt.Color(255, 0, 0));
        lblWarningUnits.setText("warning");
        jPanel4.add(lblWarningUnits);
        lblWarningUnits.setBounds(880, 210, 210, 14);

        UnitsPerCrateLbl1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        UnitsPerCrateLbl1.setForeground(new java.awt.Color(255, 255, 255));
        UnitsPerCrateLbl1.setText("Units per crate:");
        jPanel4.add(UnitsPerCrateLbl1);
        UnitsPerCrateLbl1.setBounds(530, 200, 120, 30);

        lblWarningProduct.setBackground(new java.awt.Color(255, 153, 51));
        lblWarningProduct.setForeground(new java.awt.Color(255, 0, 0));
        lblWarningProduct.setText("warning");
        jPanel4.add(lblWarningProduct);
        lblWarningProduct.setBounds(880, 160, 210, 14);

        ProductTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(ProductTbl);

        jPanel4.add(jScrollPane2);
        jScrollPane2.setBounds(40, 30, 452, 404);

        jTabbedPane1.addTab("Add/Delete Product", jPanel4);

        jPanel1.add(jTabbedPane1);
        jTabbedPane1.setBounds(120, 130, 1040, 550);

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));
        jPanel6.setLayout(null);

        btnSignOut.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnSignOut.setForeground(new java.awt.Color(255, 255, 255));
        btnSignOut.setText("Sign Out");
        btnSignOut.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(133, 1, 41), 3, true));
        btnSignOut.setContentAreaFilled(false);
        btnSignOut.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                btnSignOutMouseMoved(evt);
            }
        });
        btnSignOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignOutActionPerformed(evt);
            }
        });
        jPanel6.add(btnSignOut);
        btnSignOut.setBounds(940, 20, 90, 30);

        jPanel1.add(jPanel6);
        jPanel6.setBounds(120, 90, 1040, 530);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Lifestyle_Overlay.jpg"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 1270, 740);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1270, 740);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MinLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinLblMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_MinLblMouseClicked

    private void ExitLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitLblMouseClicked
        System.exit(0);
    }//GEN-LAST:event_ExitLblMouseClicked

    private void btnSignOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignOutActionPerformed
        LoginPage lp = new LoginPage();
        lp.signOut(this);
    }//GEN-LAST:event_btnSignOutActionPerformed

    private void AddStoreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStoreBtnActionPerformed
        if (doneblinking) {
            addStore(StoreNameTf.getText(), ContactNumberTf.getText(), StoreAddressTa.getText());
            clearAddStoreFields();
        }
    }//GEN-LAST:event_AddStoreBtnActionPerformed

    private void AddProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProductBtnActionPerformed
        if (doneblinking) {
            addProduct(ProductNameTf.getText(), UnitsPerCrateTf.getText());
            clearAddProductFields();
            try {
                displayTable();
            } catch (SQLException e) {
                Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_AddProductBtnActionPerformed

    private void StoreUserAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StoreUserAddBtnActionPerformed
        addStoreUser(StoreUser_Name_Tf.getText(), StoreUser_Surname_Tf.getText(), StoreUser_StoreName_Cb.getSelectedItem().toString(), StoreUser_Username_Tf.getText(), StoreUser_Password_Pf.getText());
        clearAddAdminUserFields();
        clearAddDispatchUserFields();
        clearAddStoreUserFields();
    }//GEN-LAST:event_StoreUserAddBtnActionPerformed

    private void showPassword_AddDispatchUser_LblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showPassword_AddDispatchUser_LblMouseClicked
        char clear = 0;
        char current = DispatchUser_Password_Pf.getEchoChar();
        int compareOneTwo = Character.compare(current, clear);
        if (compareOneTwo == 0) {
            showPassword_AddDispatchUser_Lbl.setIcon(getImageIcon(new File("src/Resources/show-password-white.png")));
            DispatchUser_Password_Pf.setEchoChar('*');
        } else {
            showPassword_AddDispatchUser_Lbl.setIcon(getImageIcon(new File("src/Resources/show-password-on.png")));
            DispatchUser_Password_Pf.setEchoChar(clear);
        }
    }//GEN-LAST:event_showPassword_AddDispatchUser_LblMouseClicked

    private void StoreUserDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StoreUserDeleteBtnActionPerformed
        String u_name = StoreUser_Username_Tf.getText();
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + u_name);
        if (confirm == 0) {
            clearAddAdminUserFields();
            clearAddDispatchUserFields();
            clearAddStoreUserFields();
            deleteStoreUser(u_name);
        }
    }//GEN-LAST:event_StoreUserDeleteBtnActionPerformed

    private void DispatchUserAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DispatchUserAddBtnActionPerformed
        addDispatchUser(DispatchUser_Name_Tf.getText(), DispatchUser_Surname_Tf.getText(), DispatchUser_Username_Tf.getText(), DispatchUser_Password_Pf.getText());
    }//GEN-LAST:event_DispatchUserAddBtnActionPerformed

    private void DispatchUserDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DispatchUserDeleteBtnActionPerformed
        String u_name = DispatchUser_Username_Tf.getText();
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + u_name);
        if (confirm == 0) {
            clearAddAdminUserFields();
            clearAddDispatchUserFields();
            clearAddStoreUserFields();
            deleteDispatchUser(u_name);
        }
    }//GEN-LAST:event_DispatchUserDeleteBtnActionPerformed

    private void showPassword_AddStoreUser_LblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showPassword_AddStoreUser_LblMouseClicked
        char clear = 0;
        char current = StoreUser_Password_Pf.getEchoChar();
        int compareOneTwo = Character.compare(current, clear);
        if (compareOneTwo == 0) {
            showPassword_AddStoreUser_Lbl.setIcon(getImageIcon(new File("src/Resources/show-password-white.png")));
            StoreUser_Password_Pf.setEchoChar('*');
        } else {
            showPassword_AddStoreUser_Lbl.setIcon(getImageIcon(new File("src/Resources/show-password-on.png")));
            StoreUser_Password_Pf.setEchoChar(clear);
        }
    }//GEN-LAST:event_showPassword_AddStoreUser_LblMouseClicked

    private void AdminUserAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminUserAddBtnActionPerformed
        addAdminUser(AdminNameTf.getText(), AdminSurnameTf.getText(), AdminUsernameTf.getText(), AdminUser_Password_Pf.getText());
        clearAddAdminUserFields();
        clearAddDispatchUserFields();
        clearAddStoreUserFields();
    }//GEN-LAST:event_AdminUserAddBtnActionPerformed

    private void showPassword_AddAdminUser_LblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showPassword_AddAdminUser_LblMouseClicked
        char clear = 0;
        char current = AdminUser_Password_Pf.getEchoChar();
        int compareOneTwo = Character.compare(current, clear);
        if (compareOneTwo == 0) {
            showPassword_AddAdminUser_Lbl.setIcon(getImageIcon(new File("src/Resources/show-password-white.png")));
            AdminUser_Password_Pf.setEchoChar('*');
        } else {
            showPassword_AddAdminUser_Lbl.setIcon(getImageIcon(new File("src/Resources/show-password-on.png")));
            AdminUser_Password_Pf.setEchoChar(clear);
        }
    }//GEN-LAST:event_showPassword_AddAdminUser_LblMouseClicked

    private void AdminUserDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminUserDeleteBtnActionPerformed
        String u_name = AdminUsernameTf.getText();
        if (isCurrentAdmin(u_name)) {
            Ta_AddAdminUserWarnings.setText("You cannot delete your own account.");
            ScrollPane_AddAdminUserWarnings.setVisible(true);
        } else {

            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + u_name);
            if (confirm == 0) {
                clearAddAdminUserFields();
                clearAddDispatchUserFields();
                clearAddStoreUserFields();
                deleteAdminUser(u_name);
            }
        }
    }//GEN-LAST:event_AdminUserDeleteBtnActionPerformed

    private void DeleteProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteProductBtnActionPerformed
        String name = ProductTbl.getValueAt(ProductTbl.getSelectedRow(), 0) + "";
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + name);
        if (confirm == 0) {
            deleteProduct();
        }
        try {
            displayTable();
        } catch (SQLException e) {
            Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_DeleteProductBtnActionPerformed

    private void DeleteStoreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteStoreBtnActionPerformed
        String name = StoreNameTf.getText();
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + name);
        if (confirm == 0) {
            clearAddStoreFields();
            deleteStore(name);
        }
    }//GEN-LAST:event_DeleteStoreBtnActionPerformed

    private void ExitLblMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitLblMouseMoved
        ExitLbl.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_ExitLblMouseMoved

    private void MinLblMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinLblMouseMoved
        MinLbl.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_MinLblMouseMoved

    private void btnSignOutMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSignOutMouseMoved
        btnSignOut.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btnSignOutMouseMoved

    private void LblStaffInfoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblStaffInfoMouseMoved
        LblStaffInfo.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_LblStaffInfoMouseMoved

    private void LblStaffInfoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblStaffInfoMouseEntered
        Color clr = new Color(150, 40, 27);
        jPanel11.setBackground(clr);
    }//GEN-LAST:event_LblStaffInfoMouseEntered

    private void LblStaffInfoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblStaffInfoMouseExited
        Color clr = new Color(133, 1, 41);
        jPanel11.setBackground(clr);
    }//GEN-LAST:event_LblStaffInfoMouseExited

    private void LblOrdersInfoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblOrdersInfoMouseEntered
        Color clr = new Color(150, 40, 27);
        jPanel12.setBackground(clr);
    }//GEN-LAST:event_LblOrdersInfoMouseEntered

    private void LblOrdersInfoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblOrdersInfoMouseExited
        Color clr = new Color(133, 1, 41);
        jPanel12.setBackground(clr);
    }//GEN-LAST:event_LblOrdersInfoMouseExited

    private void LblOrdersInfoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblOrdersInfoMouseMoved
        LblOrdersInfo.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_LblOrdersInfoMouseMoved

    private void LblRefridgeratorMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblRefridgeratorMouseMoved
        LblRefridgerator.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_LblRefridgeratorMouseMoved

    private void LblRefridgeratorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblRefridgeratorMouseEntered
        Color clr = new Color(150, 40, 27);
        jPanel13.setBackground(clr);
    }//GEN-LAST:event_LblRefridgeratorMouseEntered

    private void LblRefridgeratorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblRefridgeratorMouseExited
        Color clr = new Color(133, 1, 41);
        jPanel13.setBackground(clr);
    }//GEN-LAST:event_LblRefridgeratorMouseExited

    private void LblOrdersInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblOrdersInfoMouseClicked
        staffInfoVisible(false);
        freezerVisible(false);
        ordersInfoVisible(true);
    }//GEN-LAST:event_LblOrdersInfoMouseClicked

    private void LblStaffInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblStaffInfoMouseClicked
        ordersInfoVisible(false);
        freezerVisible(false);
        staffInfoVisible(true);
    }//GEN-LAST:event_LblStaffInfoMouseClicked

    private void LblRefridgeratorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LblRefridgeratorMouseClicked
        staffInfoVisible(false);
        ordersInfoVisible(false);
        freezerVisible(true);
    }//GEN-LAST:event_LblRefridgeratorMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddProductBtn;
    private javax.swing.JButton AddStoreBtn;
    private javax.swing.JLabel AdminNameLbl;
    private javax.swing.JTextField AdminNameTf;
    private javax.swing.JLabel AdminPasswordLbl;
    private javax.swing.JTextField AdminSurnameTf;
    private javax.swing.JButton AdminUserAddBtn;
    private javax.swing.JButton AdminUserDeleteBtn;
    private javax.swing.JLabel AdminUserLbl;
    private javax.swing.JPasswordField AdminUser_Password_Pf;
    private javax.swing.JLabel AdminUsernameLbl;
    private javax.swing.JTextField AdminUsernameTf;
    private javax.swing.JLabel ContactNumberLbl;
    private javax.swing.JTextField ContactNumberTf;
    private javax.swing.JButton DeleteProductBtn;
    private javax.swing.JButton DeleteStoreBtn;
    private javax.swing.JLabel DispatchPasswordLbl;
    private javax.swing.JButton DispatchUserAddBtn;
    private javax.swing.JButton DispatchUserDeleteBtn;
    private javax.swing.JLabel DispatchUserLbl;
    private javax.swing.JLabel DispatchUser_Name_Lbl;
    private javax.swing.JLabel DispatchUser_Name_Lbl1;
    private javax.swing.JTextField DispatchUser_Name_Tf;
    private javax.swing.JPasswordField DispatchUser_Password_Pf;
    private javax.swing.JLabel DispatchUser_Surame_Lbl;
    private javax.swing.JLabel DispatchUser_Surame_Lbl1;
    private javax.swing.JTextField DispatchUser_Surname_Tf;
    private javax.swing.JTextField DispatchUser_Username_Tf;
    private javax.swing.JLabel ExitLbl;
    private javax.swing.JTable JTFreezerManagement;
    private javax.swing.JTable JTOrdersInfo;
    private javax.swing.JTable JTStaffInfo;
    private javax.swing.JTable JTStores;
    private javax.swing.JLabel LblAnagement;
    private javax.swing.JLabel LblF;
    private javax.swing.JLabel LblI;
    private javax.swing.JLabel LblM;
    private javax.swing.JLabel LblNformation;
    private javax.swing.JLabel LblO;
    private javax.swing.JLabel LblOrdersInfo;
    private javax.swing.JLabel LblRders;
    private javax.swing.JLabel LblReezer;
    private javax.swing.JLabel LblRefridgerator;
    private javax.swing.JLabel LblS;
    private javax.swing.JLabel LblStaffInfo;
    private javax.swing.JLabel LblTaff;
    private javax.swing.JLabel MinLbl;
    private javax.swing.JLabel ProductNameLbl;
    private javax.swing.JTextField ProductNameTf;
    private javax.swing.JTable ProductTbl;
    private javax.swing.JScrollPane ScrollPane_AddAdminUserWarnings;
    private javax.swing.JScrollPane ScrollPane_AddDispatchUserWarnings;
    private javax.swing.JScrollPane ScrollPane_AddStoreUserWarnings;
    private javax.swing.JLabel StoreAddressLbl;
    private javax.swing.JTextArea StoreAddressTa;
    private javax.swing.JLabel StoreIdentityLbl;
    private javax.swing.JLabel StoreNameLbl;
    private javax.swing.JTextField StoreNameTf;
    private javax.swing.JLabel StorePasswordLbl;
    private javax.swing.JButton StoreUserAddBtn;
    private javax.swing.JButton StoreUserDeleteBtn;
    private javax.swing.JLabel StoreUserLbl;
    private javax.swing.JTextField StoreUser_Name_Tf;
    private javax.swing.JPasswordField StoreUser_Password_Pf;
    private javax.swing.JComboBox<String> StoreUser_StoreName_Cb;
    private javax.swing.JTextField StoreUser_Surname_Tf;
    private javax.swing.JTextField StoreUser_Username_Tf;
    private javax.swing.JLabel StoreUsernameLbl1;
    private javax.swing.JLabel StoreUsernameLbl2;
    private javax.swing.JLabel StoreUsernameLbl3;
    private javax.swing.JLabel StoreUsernameLbl5;
    private javax.swing.JTextArea Ta_AddAdminUserWarnings;
    private javax.swing.JTextArea Ta_AddDispatchUserWarnings;
    private javax.swing.JTextArea Ta_AddStoreUserWarnings;
    private javax.swing.JLabel UnitsPerCrateLbl1;
    private javax.swing.JTextField UnitsPerCrateTf;
    private javax.swing.JButton btnSignOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblWarningProduct;
    private javax.swing.JLabel lblWarningUnits;
    private javax.swing.JLabel password_warning_lbl1;
    private javax.swing.JLabel password_warning_lbl2;
    private javax.swing.JLabel password_warning_lbl3;
    private javax.swing.JLabel password_warning_lbl4;
    private javax.swing.JLabel password_warning_lbl5;
    private javax.swing.JLabel password_warning_lbl6;
    private javax.swing.JLabel password_warning_lbl7;
    private javax.swing.JLabel password_warning_lbl8;
    private javax.swing.JLabel password_warning_lbl9;
    private javax.swing.JLabel showPassword_AddAdminUser_Lbl;
    private javax.swing.JLabel showPassword_AddDispatchUser_Lbl;
    private javax.swing.JLabel showPassword_AddStoreUser_Lbl;
    private javax.swing.JLabel warning_Store_Address_Lbl;
    private javax.swing.JLabel warning_Store_Name_Lbl;
    private javax.swing.JLabel warning_Store_Number_Lbl;
    // End of variables declaration//GEN-END:variables

    private void displayStaff() throws SQLException {
        st = conn.createStatement();
        rs = st.executeQuery("SELECT * FROM Staff ORDER BY store_ID, staff_Surname");
        DefaultTableModel model = new DefaultTableModel(new Object[]{"Name", "Surname", "Store", "Username"}, 0);

        while (rs.next()) {
            //System.out.println(a++);
            //System.out.println(rs.getInt("order_ID") + "," + rs.getInt("order_Status"));

            Object order[] = {rs.getString("staff_Name"), rs.getString("staff_Surname"), getStoreName(rs.getInt("store_ID")), rs.getString("username")};
            staffList.add(order);
            //System.out.println(orderList.size());
            model.addRow(staffList.get(staffList.size() - 1));
        }
        JTStaffInfo.setModel(model);
    }
    
        private void displayStores() throws SQLException {
        st = conn.createStatement();
        rs = st.executeQuery("SELECT * FROM Store ORDER BY store_ID");
        DefaultTableModel model = new DefaultTableModel(new Object[]{"Store Name", "Phone Number"}, 0);

        while (rs.next()) {
            //System.out.println(a++);
            //System.out.println(rs.getInt("order_ID") + "," + rs.getInt("order_Status"));

            Object order[] = {rs.getString("store_Name"), rs.getString("store_PhoneNumber")};
            storeList.add(order);
            //System.out.println(orderList.size());
            model.addRow(storeList.get(storeList.size() - 1));
        }
        JTStores.setModel(model);
    }

    private void displayOrders() throws SQLException {
        st = conn.createStatement();
        rs = st.executeQuery("SELECT * FROM Orders ORDER BY order_Status, store_ID, order_Date");
        DefaultTableModel model = new DefaultTableModel(new Object[]{"Order ID", "Order Date", "Store", "Order Status"}, 0);

        while (rs.next()) {
            //System.out.println(a++);
            //System.out.println(rs.getInt("order_ID") + "," + rs.getInt("order_Status"));

            if (rs.getInt("order_Status") > 0) {
                Object order[] = {rs.getInt("order_ID"), rs.getDate("order_Date"), getStoreName(rs.getInt("store_ID")), "Complete"};
                orderList.add(order);
            } else {
                Object order[] = {rs.getInt("order_ID"), rs.getDate("order_Date"), getStoreName(rs.getInt("store_ID")), "Incomplete"};
                orderList.add(order);
            }
            //System.out.println(orderList.size());
            model.addRow(orderList.get(orderList.size() - 1));
        }
        JTOrdersInfo.setModel(model);
    }

    private String getStoreName(int ID) {
        String store_Name = null;
        Statement st_1;
        ResultSet rs_1;

        try {
            st_1 = conn.createStatement();
            rs_1 = st_1.executeQuery("SELECT store_Name FROM Store WHERE store_ID =" + ID);
            while (rs_1.next()) {
                store_Name = rs_1.getString("store_Name");
            }

        } catch (SQLException e) {
            Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, e);
            //System.out.println("Here");
        }
        return store_Name;
    }

    public void staffInfoVisible(boolean temp) {
        LblS.setVisible(temp);
        LblTaff.setVisible(temp);
        LblI.setVisible(temp);
        LblNformation.setVisible(temp);
        jScrollPane3.setVisible(temp);
        JTStaffInfo.setVisible(temp);
        try {
            displayStaff();
        } catch (SQLException e) {
            Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, e);
        }

        jScrollPane3.setVisible(temp);
    }

    public void ordersInfoVisible(boolean temp) {
        LblO.setVisible(temp);
        LblRders.setVisible(temp);
        LblI.setVisible(temp);
        LblNformation.setVisible(temp);
        jScrollPane4.setVisible(temp);
        JTOrdersInfo.setVisible(temp);
        try {
            displayOrders();
        } catch (SQLException e) {
            Logger.getLogger(DispatchPage.class.getName()).log(Level.SEVERE, null, e);
        }
        jScrollPane4.setVisible(temp);
    }

    public void freezerVisible(boolean temp) {
        LblM.setVisible(temp);
        LblAnagement.setVisible(temp);
        LblF.setVisible(temp);
        LblReezer.setVisible(temp);
        jScrollPane6.setVisible(temp);
        JTFreezerManagement.setVisible(temp);
    }

    public void setForegroundColourToWhite() {
        LblS.setForeground(Color.white);
        LblTaff.setForeground(Color.white);
        LblI.setForeground(Color.white);
        LblNformation.setForeground(Color.white);
        LblO.setForeground(Color.white);
        LblRders.setForeground(Color.white);
        LblM.setForeground(Color.white);
        LblAnagement.setForeground(Color.white);
        LblF.setForeground(Color.white);
        LblReezer.setForeground(Color.white);
    }

    private void addStore(String store, String phone, String address) {

        boolean valid = true;
        if (store.isEmpty()) {
            valid = false;
            warning_Store_Name_Lbl.setVisible(true);
            warning_Store_Name_Lbl.setText("Please specify");
            StoreNameTf.setBackground(Color.RED);
        } else {
            if (storeExists(store)) {
                valid = false;
                warning_Store_Name_Lbl.setVisible(true);
                warning_Store_Name_Lbl.setText("Store name already used.");
                StoreNameTf.setBackground(Color.RED);
            } else {
                warning_Store_Name_Lbl.setVisible(false);
                StoreNameTf.setBackground(Color.WHITE);
            }
        }
        if (phone.isEmpty()) {
            valid = false;
            warning_Store_Number_Lbl.setVisible(true);
            warning_Store_Number_Lbl.setText("Please specify");
            ContactNumberTf.setBackground(Color.RED);

        } else {
            if (isValidCellphone(phone)) {
                warning_Store_Number_Lbl.setVisible(false);

                ContactNumberTf.setBackground(Color.WHITE);
            } else {
                valid = false;
                warning_Store_Number_Lbl.setVisible(true);
                warning_Store_Number_Lbl.setText("Invalid number");
                ContactNumberTf.setBackground(Color.RED);
            }
        }
        if (address.isEmpty()) {
            valid = false;
            warning_Store_Address_Lbl.setVisible(true);
            warning_Store_Address_Lbl.setText("Please specify");
            StoreAddressTa.setBackground(Color.RED);
        } else {
            warning_Store_Number_Lbl.setVisible(false);
            StoreAddressTa.setBackground(Color.WHITE);
        }

        try {
            if (valid) {

                st.executeUpdate("INSERT INTO store (store_Name, store_Address, store_PhoneNumber) VALUES ('" + store + "','" + address + "','" + phone + "')");
                blinkGreen(AddStoreBtn, "ADDED!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void populateStoresDropdown() throws SQLException {

        rs = st.executeQuery("SELECT * FROM Store");
        while (rs.next()) {
            StoreUser_StoreName_Cb.addItem(rs.getInt("store_ID") + ":" + rs.getString("store_Name"));
        }

    }

    private void addProduct(String name, String units) {

        int compID = 1;
        boolean valid = true;
        int u_p_crate = -1;
        try {
            u_p_crate = Integer.parseInt(units);
            lblWarningUnits.setVisible(false);
        } catch (NumberFormatException e) {
            valid = false;
            lblWarningUnits.setText("Invalid input");
            UnitsPerCrateTf.setText("");
            lblWarningUnits.setVisible(true);
        }
        try {
            if (companyExists(compID) & !productExists(name) & valid) {
                st.executeUpdate("INSERT INTO product (product_Name, product_UnitsPerCrate, company_ID) VALUES ('" + name + "'," + u_p_crate + "," + compID + ")");
                blinkGreen(AddProductBtn, "ADDED!");
            } else {
                blink(AddProductBtn);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public boolean isValidPassword(String pass) {

        final String passwordRegex = "^(?=.{8,})(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$";

        Pattern pattern = Pattern.compile(passwordRegex);
        Matcher matcher = pattern.matcher(pass);
        return matcher.matches();
    }

    private void addStoreUser(String name, String surname, String store, String uname, String password) {

        String warnings = "";
        boolean valid = true;
        if (name.isEmpty()) {
            StoreUser_Name_Tf.setBackground(Color.RED);
            valid = false;
        } else {
            StoreUser_Name_Tf.setBackground(Color.WHITE);
        }
        if (surname.isEmpty()) {
            StoreUser_Surname_Tf.setBackground(Color.RED);
            valid = false;
        } else {
            StoreUser_Surname_Tf.setBackground(Color.WHITE);
        }

        if (usernameExists("Staff", uname)) {
            valid = false;
            warnings = warnings + "Username already exists \n";
            StoreUser_Username_Tf.setBackground(Color.RED);
        } else {
            if (uname.isEmpty()) {
                valid = false;
                StoreUser_Username_Tf.setBackground(Color.RED);
            } else {
                StoreUser_Username_Tf.setBackground(Color.WHITE);
            }
        }

        if (!isValidPassword(password)) {
            valid = false;
            warnings = warnings + "Invalid password \n";
            StoreUser_Password_Pf.setBackground(Color.RED);
            password_warning_lbl1.setVisible(true);
            password_warning_lbl2.setVisible(true);
            password_warning_lbl3.setVisible(true);
        } else {
            password_warning_lbl1.setVisible(false);
            password_warning_lbl2.setVisible(false);
            password_warning_lbl3.setVisible(false);
            StoreUser_Password_Pf.setBackground(Color.WHITE);
        }
        if (valid) {
            ScrollPane_AddStoreUserWarnings.setVisible(false);
            int storeID = Integer.parseInt(store.split(":")[0]);
            try {
                st.executeUpdate("INSERT INTO Staff (staff_Name, staff_Surname, store_ID, username, password) VALUES "
                        + "('" + name + "','"
                        + surname + "','"
                        + storeID + "','"
                        + uname + "','"
                        + password + "')");
                blinkGreen(StoreUserAddBtn, "SUCCESS");
                clearAddStoreUserFields();
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            blink(StoreUserAddBtn);
            StoreUserAddBtn.setBackground(Color.WHITE);
            ScrollPane_AddStoreUserWarnings.setVisible(true);
            Ta_AddStoreUserWarnings.setText(warnings);
        }

    }

    private void addDispatchUser(String name, String surname, String uname, String password) {

        String warnings = "";
        boolean valid = true;
        if (name.isEmpty()) {
            DispatchUser_Name_Tf.setBackground(Color.RED);
            valid = false;
        } else {
            DispatchUser_Name_Tf.setBackground(Color.WHITE);
        }
        if (surname.isEmpty()) {
            DispatchUser_Surname_Tf.setBackground(Color.RED);
            valid = false;
        } else {
            DispatchUser_Surname_Tf.setBackground(Color.WHITE);
        }
        if (usernameExists("Dispatch", uname)) {
            valid = false;
            warnings = warnings + "Username already exists \n";
            DispatchUser_Username_Tf.setBackground(Color.RED);
        } else {
            if (uname.isEmpty()) {
                valid = false;
                DispatchUser_Username_Tf.setBackground(Color.RED);
            } else {
                DispatchUser_Username_Tf.setBackground(Color.WHITE);
            }
        }

        if (!isValidPassword(password)) {
            valid = false;
            warnings = warnings + "Invalid password \n";
            DispatchUser_Password_Pf.setBackground(Color.RED);
            password_warning_lbl4.setVisible(true);
            password_warning_lbl5.setVisible(true);
            password_warning_lbl6.setVisible(true);
        } else {
            password_warning_lbl4.setVisible(false);
            password_warning_lbl5.setVisible(false);
            password_warning_lbl6.setVisible(false);
            DispatchUser_Password_Pf.setBackground(Color.WHITE);
        }

        int amount = 1;
        if (valid) {
            ScrollPane_AddDispatchUserWarnings.setVisible(false);
            try {
                st.executeUpdate("INSERT INTO dispatch (dispatch_Name, dispatch_Surname, company_ID, username, password) VALUES "
                        + "('" + name + "','"
                        + surname + "','"
                        + amount + "','"
                        + uname + "','"
                        + password + "')");
                blinkGreen(DispatchUserAddBtn, "SUCCESS");
                clearAddDispatchUserFields();
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            blink(DispatchUserAddBtn);
            DispatchUserAddBtn.setBackground(Color.WHITE);
            ScrollPane_AddDispatchUserWarnings.setVisible(true);
            Ta_AddDispatchUserWarnings.setText(warnings);
        }

    }

    private void addAdminUser(String name, String surname, String uname, String password) {

        String warnings = "";
        boolean valid = true;
        if (name.isEmpty()) {
            AdminNameTf.setBackground(Color.RED);
            valid = false;
        } else {
            AdminNameTf.setBackground(Color.WHITE);
        }
        if (surname.isEmpty()) {
            AdminSurnameTf.setBackground(Color.RED);
            valid = false;
        } else {
            AdminSurnameTf.setBackground(Color.WHITE);
        }

        if (usernameExists("Admins", uname)) {
            valid = false;
            warnings = warnings + "Username already exists \n";
            AdminUsernameTf.setBackground(Color.RED);
        } else {
            if (uname.isEmpty()) {
                valid = false;
                AdminUsernameTf.setBackground(Color.RED);
            } else {
                AdminUsernameTf.setBackground(Color.WHITE);
            }
        }

        if (!isValidPassword(password)) {
            valid = false;
            warnings = warnings + "Invalid password \n";
            AdminUser_Password_Pf.setBackground(Color.RED);
            password_warning_lbl7.setVisible(true);
            password_warning_lbl8.setVisible(true);
            password_warning_lbl9.setVisible(true);
        } else {
            password_warning_lbl7.setVisible(false);
            password_warning_lbl8.setVisible(false);
            password_warning_lbl9.setVisible(false);
            AdminUser_Password_Pf.setBackground(Color.WHITE);
        }
        if (valid) {
            ScrollPane_AddAdminUserWarnings.setVisible(false);
            int companyID = 1;
            try {
                st.executeUpdate("INSERT INTO Admins (admin_Name, admin_Surname, company_ID, username, password) VALUES "
                        + "('" + name + "','"
                        + surname + "','"
                        + companyID + "','"
                        + uname + "','"
                        + password + "')");
                blinkGreen(AdminUserAddBtn, "SUCCESS");
                clearAddAdminUserFields();
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            blink(AdminUserAddBtn);
            AdminUserAddBtn.setBackground(Color.WHITE);
            ScrollPane_AddAdminUserWarnings.setVisible(true);
            Ta_AddAdminUserWarnings.setText(warnings);
        }

    }

    private void setPreferredStates() {
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        lblWarningUnits.setVisible(false);
        //lblWarningCompanyId.setVisible(false);
        lblWarningProduct.setVisible(false);
        ScrollPane_AddStoreUserWarnings.setVisible(false);
        ScrollPane_AddDispatchUserWarnings.setVisible(false);
        ScrollPane_AddAdminUserWarnings.setVisible(false);
        password_warning_lbl1.setVisible(false);
        password_warning_lbl2.setVisible(false);
        password_warning_lbl3.setVisible(false);
        password_warning_lbl4.setVisible(false);
        password_warning_lbl5.setVisible(false);
        password_warning_lbl6.setVisible(false);
        password_warning_lbl7.setVisible(false);
        password_warning_lbl8.setVisible(false);
        password_warning_lbl9.setVisible(false);
        warning_Store_Address_Lbl.setVisible(false);
        warning_Store_Number_Lbl.setVisible(false);
        warning_Store_Name_Lbl.setVisible(false);
    }

    private boolean companyExists(int c_ID) throws SQLException {
        rs = st.executeQuery("SELECT * FROM Company WHERE company_ID= " + c_ID + ";");
        if (rs.next()) {
            //lblWarningCompanyId.setVisible(false);
            return true;
        } else {
            //lblWarningCompanyId.setVisible(true);
            //lblWarningCompanyId.setText("Invalid company ID.");
            return false;
        }
    }

    private boolean productExists(String name) throws SQLException {
        if (name.isEmpty()) {
            lblWarningProduct.setVisible(true);
            lblWarningProduct.setText("Please specify.");
            return true;
        } else {
            lblWarningProduct.setVisible(false);
        }
        rs = st.executeQuery("SELECT * FROM Product WHERE product_Name = '" + name + "';");
        if (rs.next()) {
            lblWarningProduct.setVisible(true);
            lblWarningProduct.setText("Product already exists.");
            return true;
        } else {
            lblWarningProduct.setVisible(false);
            return false;
        }
    }

    private boolean storeExists(String store_Name) {

        try {
            rs = st.executeQuery("SELECT * FROM Store WHERE store_Name = '" + store_Name + "';");
            if (rs.next()) {
                return true;
            } else {
                return false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    private boolean usernameExists(String table, String u_Name) {

        try {
            rs = st.executeQuery("SELECT * FROM Admins WHERE username = '" + u_Name + "';");
            if (rs.next()) {
                return true;
            } else {
                rs = st.executeQuery("SELECT * FROM Dispatch WHERE username = '" + u_Name + "';");
                if (rs.next()) {
                    return true;
                } else {
                    rs = st.executeQuery("SELECT * FROM Staff WHERE username = '" + u_Name + "';");
                    if (rs.next()) {
                        return true;
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    boolean doneblinking = true;

    private void blinkGreen(JButton button, String message) {
        if (doneblinking) {
            doneblinking = false;
            String originalText = button.getText();
            button.setText(message);
            Color original = button.getBackground();
            Timer blinkTimer = new Timer(200, new ActionListener() {
                private int count = 0;
                private int maxCount = 8;
                private boolean on = false;

                public void actionPerformed(ActionEvent e) {
                    if (count >= maxCount) {
                        button.setBackground(original);
                        button.setText(originalText);
                        doneblinking = true;
                        ((Timer) e.getSource()).stop();
                    } else {
                        button.setBackground(on ? Color.GREEN : original);
                        on = !on;
                        count++;
                    }
                }
            });
            blinkTimer.start();
        }
    }

    private void blink(JButton button) {
        if (doneblinking) {
            doneblinking = false;
            Color original = button.getBackground();
            Timer blinkTimer = new Timer(50, new ActionListener() {
                private int count = 0;
                private int maxCount = 4;
                private boolean on = false;

                public void actionPerformed(ActionEvent e) {
                    if (count >= maxCount) {
                        button.setBackground(original);

                        doneblinking = true;
                        ((Timer) e.getSource()).stop();
                    } else {
                        button.setBackground(on ? Color.RED : null);
                        on = !on;
                        count++;
                    }
                }
            });
            blinkTimer.start();
        }
    }

    public ImageIcon getImageIcon(File f) {

        ImageIcon ii = null;
        try {
            Image im = ImageIO.read(f);

            ii = new ImageIcon(im);

        } catch (IOException i) {

            i.printStackTrace();

        } finally {

            return ii;

        }
    }

    private void clearAddStoreFields() {
        ContactNumberTf.setText("");
        StoreAddressTa.setText("");
        StoreNameTf.setText("");
        warning_Store_Number_Lbl.setVisible(false);
        warning_Store_Address_Lbl.setVisible(false);
    }

    private void clearAddStoreUserFields() {
        StoreUser_Name_Tf.setText("");
        StoreUser_Surname_Tf.setText("");
        StoreUser_Username_Tf.setText("");
        StoreUser_Password_Pf.setText("");
    }

    private void clearAddDispatchUserFields() {
        DispatchUser_Name_Tf.setText("");
        DispatchUser_Surname_Tf.setText("");
        DispatchUser_Username_Tf.setText("");
        DispatchUser_Password_Pf.setText("");
    }

    private void clearAddAdminUserFields() {
        AdminNameTf.setText("");
        AdminSurnameTf.setText("");
        AdminUsernameTf.setText("");
        AdminUser_Password_Pf.setText("");
        AdminUser_Password_Pf.setEchoChar('*');
    }

    private void clearAddProductFields() {
        ProductNameTf.setText("");
        UnitsPerCrateTf.setText("");
    }

    private void deleteStoreUser(String u_name) {
        if (usernameExists("staff", u_name)) {
            try {
                st.executeUpdate("DELETE FROM STAFF WHERE username = '" + u_name + "'");

                blinkGreen(StoreUserDeleteBtn, "DELETED");
                ScrollPane_AddStoreUserWarnings.setVisible(false);
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            ScrollPane_AddStoreUserWarnings.setVisible(true);
            Ta_AddStoreUserWarnings.setText("User not found");
        }
    }

    private void deleteStore(String store) {
        if (storeExists(store)) {
            try {
                st.executeUpdate("DELETE FROM store WHERE store_Name = '" + store + "'");

                blinkGreen(DeleteStoreBtn, "DELETED");
                warning_Store_Name_Lbl.setVisible(false);
                StoreNameTf.setBackground(Color.WHITE);
                ContactNumberTf.setBackground(Color.WHITE);
                StoreAddressTa.setBackground(Color.WHITE);
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            StoreNameTf.setBackground(Color.RED);
            warning_Store_Name_Lbl.setVisible(true);
            warning_Store_Name_Lbl.setText("Store not found");
            blink(DeleteStoreBtn);
        }
    }

    private void deleteDispatchUser(String u_name) {
        if (usernameExists("dispatch", u_name)) {
            try {
                st.executeUpdate("DELETE FROM dispatch WHERE username = '" + u_name + "'");

                blinkGreen(DispatchUserDeleteBtn, "DELETED");
                ScrollPane_AddDispatchUserWarnings.setVisible(false);
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            ScrollPane_AddDispatchUserWarnings.setVisible(true);
            Ta_AddDispatchUserWarnings.setText("User not found");
        }
    }

    private void deleteAdminUser(String u_name) {
        if (usernameExists("admins", u_name)) {
            try {
                st.executeUpdate("DELETE FROM admins WHERE username = '" + u_name + "'");

                blinkGreen(AdminUserDeleteBtn, "DELETED");
                ScrollPane_AddAdminUserWarnings.setVisible(false);
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            ScrollPane_AddAdminUserWarnings.setVisible(true);
            Ta_AddAdminUserWarnings.setText("User not found");
        }
    }

    private void deleteProduct() {
        String prod_Name = ProductTbl.getValueAt((ProductTbl.getSelectedRow()), 0) + "";
        try {
            if (doneblinking) {
                if (productExists(prod_Name)) {
                    st.executeUpdate("DELETE FROM Product WHERE product_Name = '" + prod_Name + "'");
                    blinkGreen(DeleteProductBtn, "DELETED");
                    lblWarningProduct.setVisible(false);
                } else {
                    lblWarningProduct.setText("Product does not exist.");
                    lblWarningProduct.setVisible(true);
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean isValidCellphone(String phone) {
        String cellphoneRegex = "^((?:\\+27|27)|0)(\\d{2})-?(\\d{3})-?(\\d{4})$";
        Pattern pattern = Pattern.compile(cellphoneRegex);
        Matcher matcher = pattern.matcher(phone);
        return matcher.matches();
    }

    private void displayTable() throws SQLException {
        st = conn.createStatement();
        rs = st.executeQuery("SELECT * FROM Product");
        DefaultTableModel model = new DefaultTableModel(new Object[]{"Product name", "Units per crate", "Product ID"}, 0);
        //int a = 0;
        while (rs.next()) {
            //System.out.println(a++);
            //System.out.println(rs.getString("product_Name") + "," + rs.getInt("product_UnitsPerCrate") + "," + rs.getInt("product_Id"));
            Object product[] = {rs.getString("product_Name"), rs.getInt("product_UnitsPerCrate"), rs.getInt("product_Id")};
            productList.add(product);
            //System.out.println(productList.size());
            model.addRow(productList.get(productList.size() - 1));
        }
        ProductTbl.setModel(model);
    }

    private boolean isCurrentAdmin(String u_name) {

        if (u_name.equalsIgnoreCase(adminUsername)) {
            return true;
        }
        return false;
    }

}
